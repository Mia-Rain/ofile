#!/bin/sh
trim_all() {
    # Usage: trim_all "   example   string    "

    # Disable globbing to make the word-splitting below safe.
    set -f

    # Set the argument list to the word-splitted string.
    # This removes all leading/trailing white-space and reduces
    # all instances of multiple spaces to a single ("  " -> " ").
    set -- $*

    # Print the argument list as a string.
    printf '%s\n' "$*"

    # Re-enable globbing.
    set +f
}
# stolen from github.com/dylanaraps/pure-sh-bible
# MIT LICENSED; therefore idc
shcat() {
  while IFS= read -r p || [ "$p" ]; do
    printf '%s\n' "$p"
  done
}
ofile() {
  [ "$2" != "POSIX" ] && {
    octdump="$(od -t o1 -An < "$1")"
    octdump="$(trim_all "$octdump")"
  }
  case "$2" in
    ("UTF8"|"UTF8s")
      utf8 "${2}"
      ;;
    ("OCTAL")
      shcat << EOF
$octdump
EOF
      exit 0
      ;;
    ("POSIX")
      shcat < "$1"; exit 0
      ;;
  esac
}
utf8() {
  [ "$1" = "UTF8s" ] && san="1"
  while read -r line || [ "$line" ]; do
    IFS=" "
    set -- ${line};
    while [ "$1" ]; do
      # it should be as simple as
      # printf $(printf '\%s' "$1")
      # but its sightly more complex because
      # unicode and ascii vs extended ascii
      # 0->177 (ascii)
      # is just single octal
      # and printf $(printf '\%s' "$oct")
      # works fine
      # 302 -> 321 is double octal
      # and requires that we first read the 3 bits
      # then shift 1 and read the next 3 bits
      # then output it all
      # 341->359 is triple octal
      # 360+ is quad octal
      # 360 & quad are the currently largest defined
      # codes I could find
      # alas unicode v16 is set to release in september 2024
      # and characters within unicode v15 are still within 360
      # quad range
      # currently no quintuple range is known
      # and its not currently possible to test for it
      if [ "$1" -le 40 ]; then
        [ "$san" ] && { 
          case "$1" in
            ("011") printf '%s' "\t"; shift 1;; # tab
            ("040") printf '_'; shift 1;; # space
            ("012") printf '$\n'; shift 1;; # new line
            (*) trim_all "$(printf $(printf '\%s' "$1") | od -An -ta)"
              shift 1;;
          esac
        } || {
          printf $(printf '\%s' "$1")
          shift 1
        }
      elif [ "$1" -le 301 ]; then
        # single octal
        # 0->177
        # I don't actually know if there is anything defined within 177->302
        printf $(printf '\%s' "$1")
        shift 1
        [ "$1" ] || break
      elif [ "$1" -le 321 ] && [ "$1" -ge 302 ]; then
        # double octal
        printf $(printf '\%s\%s' "$1" "$2")
        shift 2
        [ "$1" ] || break
      elif [ "$1" -lt 360 ] && [ "$1" -ge 341 ]; then
        # triple
        printf $(printf '\%s\%s\%s' "$1" "$2" "$3")
        shift 3
        [ "$1" ] || break
      elif [ "$1" -ge 360 ]; then
        printf $(printf '\%s\%s\%s\%s' "$1" "$2" "$3" "$4")
        shift 4
        [ "$1" ] || break
        # quad
      else
        "${ERR:?UNDEFINED RANGE @ $input_line}"|| exit 1
      fi
      # notably \012 is \n
    done
  done << EOF
$octdump
EOF
}
[ -e "$1" ] || {
  shcat << EOF
$1 is not present...
EOF
  exit 1
}
ofile "$@"